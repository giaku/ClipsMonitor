
(defmodule EXECUTION_MODULE (import AGENT ?ALL) (export ?ALL))
;TODO aggiungere controllo che x,y contenga quello che deve contenere

;TESTED
(defrule inform
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Inform)
    (param1 ?id)
    (param2 ?request)
    (param3 ?answer)
    (param4 ?justification)
  )
  ?f2<-(K-agent)
  =>
  (assert (exec
            (step ?s)
            (action Inform)
            (param1 ?id)
            (param2 ?request)
            (param3 ?answer)
            (param4 ?justification)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 1)))
  (pop-focus)
)

;current direction
(deffunction rotate-right(?cd)
  (if (eq ?cd east)
  then south
  else (if (eq ?cd west)
        then north
        else (if (eq ?cd north)
              then east
              else west)
       )

  )
)

;current direction
(deffunction rotate-left(?cd)
  (if (eq ?cd east)
  then north
  else (if (eq ?cd west)
        then south
        else (if (eq ?cd north)
              then west
              else east)
       )

  )
)

(defrule turnleft
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Turnleft)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  ?f2<-(K-agent (direction ?d))
  =>
  (assert (exec
            (step ?s)
            (action Turnleft)
            (param1 ?unused1)
            (param2 ?unused2)
            (param3 ?unused3)
            (param4 ?unused4)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 2))
              (direction (rotate-left ?d)))
  (retract ?f)
  (pop-focus)
)

(defrule turnright
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Turnright)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  ?f2<-(K-agent (direction ?d))
  =>
  (assert (exec
            (step ?s)
            (action Turnright)
            (param1 ?unused1)
            (param2 ?unused2)
            (param3 ?unused3)
            (param4 ?unused4)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 2))
              (direction (rotate-right ?d)))
  (retract ?f)
  (pop-focus)
)

;direction column
(deffunction update-c(?d ?c)
  (if (eq ?d east)
  then (+ ?c 1)
  else (if (eq ?d west)
        then (- ?c 1)
        else ?c
       )
  )
)

;direction row
(deffunction update-r(?d ?r)
  (if (eq ?d north)
  then (+ ?r 1)
  else (if (eq ?d south)
        then (- ?r 1)
        else ?r
       )
  )
)

(defrule forward-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Forward)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  (perc-vision
    (step ?s)
    (time ?)
    (pos-r ?)
    (pos-c ?)
    (direction ?)
    (perc1 ?) (perc2 ?perc&:(or (eq ?perc Empty) (eq ?perc Parking)))
    (perc3 ?)
    (perc4 ?) (perc5 ?) (perc6 ?)
    (perc7 ?) (perc8 ?) (perc9 ?)
  )
  ?f2<-(K-agent (pos-r ?r) (pos-c ?c) (direction ?d))
  =>
  (assert (exec
            (step ?s)
            (action Forward)
            (param1 ?unused1)
            (param2 ?unused2)
            (param3 ?unused3)
            (param4 ?unused4)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 1))
              (pos-r (update-r ?d ?r)) (pos-c (update-c ?d ?c)))
  (retract ?f)
  (pop-focus)
)

;se la cella difronte al robot non contiene Parking nè Empty
(defrule forward-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Forward)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  (perc-vision
    (step ?s)
    (time ?)
    (pos-r ?)
    (pos-c ?)
    (direction ?)
    (perc1 ?) (perc2 ?perc&:(or (neq ?perc Empty) (neq ?perc Parking)))
    (perc3 ?)
    (perc4 ?) (perc5 ?) (perc6 ?)
    (perc7 ?) (perc8 ?) (perc9 ?)
  )
  =>
  (assert (replanning));assert avoid cell
  (retract ?f)
  (pop-focus)
)

(defrule loadmeal-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadMeal)
    (param1 ?x)
    (param2 ?y)
    (param3 ?type)
    (param4 ?unused1)
  );uso il not altrimenti dovrei fare un mega or con le condizioni vere
  (not  (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 MealDispenser))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 MealDispenser))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 MealDispenser))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 MealDispenser))
          (perc9 ?)
        )
  )
  ;se non è pieno e non ha waste
  ?f2<-(K-agent (free ?slot&:(> ?slot 0)) (waste no)
                (content ?content))
  (cell)
  =>
  (assert (exec
            (step ?s)
            (action LoadMeal)
            (param1 ?x)
            (param2 ?y)
            (param3 ?type)
            (param4 ?unused1)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 15))
              (free (- ?slot 1)) (content ?content ?type))
  (pop-focus)
)

(defrule loadmeal-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadMeal)
    (param1 ?x)
    (param2 ?y)
    (param3 ?type)
    (param4 ?unused1)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 MealDispenser))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 MealDispenser))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 MealDispenser))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 MealDispenser))
        (perc9 ?)
      )
      (or (K-agent (free ?slot&:(< ?slot 1)))
          (K-agent (waste yes))
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule loadpill-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadPill)
    (param1 ?x)
    (param2 ?y)
    (param3 ?person)
    (param4 ?unused1)
  )
  (not  (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 PillDispenser))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 PillDispenser))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 PillDispenser))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 PillDispenser))
          (perc9 ?)
        )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 0));se non è pieno
                (content ?content))
  =>
  (assert (exec
            (step ?s)
            (action LoadPill)
            (param1 ?x)
            (param2 ?y)
            (param3 ?person)
            (param4 ?unused1)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 10))
              (free (- ?slot 1))
              (content ?content ?person))
  (retract ?f)
  (pop-focus)
)

(defrule loadpill-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadPill)
    (param1 ?x)
    (param2 ?y)
    (param3 ?person)
    (param4 ?unused1)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 PillDispenser))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 PillDispenser))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 PillDispenser))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 PillDispenser))
        (perc9 ?)
      )
      (K-agent (free ?slot&:(< ?slot 1)))
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule loaddessert-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadDessert)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 DessertDispenser))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 DessertDispenser))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 DessertDispenser))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 DessertDispenser))
          (perc9 ?)
      )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 0)) (waste no)
                (content ?content))
  =>
  (assert (exec
            (step ?s)
            (action LoadDessert)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 10))
              (free (- ?slot 1)) (content ?content dessert))
  (pop-focus)
)

(defrule loaddessert-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action LoadDessert)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 DessertDispenser))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 DessertDispenser))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 DessertDispenser))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 DessertDispenser))
        (perc9 ?)
      )
      (or (K-agent (free ?slot&:(< ?slot 1)))
          (K-agent (waste yes))
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule deliverymeal-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryMeal)
    (param1 ?x)
    (param2 ?y)
    (param3 ?type)
    (param4 ?unused1)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 0))
           (content $?head ?type $?tail))
  =>
  (assert (exec
            (step ?s)
            (action DeliveryMeal)
            (param1 ?x)
            (param2 ?y)
            (param3 ?type)
            (param4 ?unused1)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 12))
              (free (- ?slot 1)) (content $?head $?tail))
  (pop-focus)
)

(defrule deliverymeal-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryMeal)
    (param1 ?x)
    (param2 ?y)
    (param3 ?type)
    (param4 ?unused1)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
        (perc9 ?)
      )
      (or (K-agent (free ?slot&:(< ?slot 0)));vuoto o non ha quel tipo
          (not (K-agent (content $?head ?type $?tail)))
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule deliverypill-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryPill)
    (param1 ?x)
    (param2 ?y)
    (param3 ?person)
    (param4 ?unused1)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 0))
           (content $?head ?person $?tail))
  =>
  (assert (exec
            (step ?s)
            (action DeliveryPill)
            (param1 ?x)
            (param2 ?y)
            (param3 ?person)
            (param4 ?unused1)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 10))
              (free (- ?slot 1)) (content $?head $?tail))
  (pop-focus)
)

(defrule deliverypill-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryPill)
    (param1 ?x)
    (param2 ?y)
    (param3 ?person)
    (param4 ?unused1)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
        (perc9 ?)
      )
      (or (K-agent (free ?slot&:(< ?slot 0)));vuoto o non ha quel tipo
          (not (K-agent (content $?head ?person $?tail)))
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule deliverydessert-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryDessert)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 0))
           (content $?head dessert $?tail))
  =>
  (assert (exec
            (step ?s)
            (action DeliveryDessert)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 10))
              (free (- ?slot 1)) (content $?head $?tail))
  (pop-focus)
)

(defrule deliverydessert-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action DeliveryDessert)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
        (perc9 ?)
      )
      (or (K-agent (free ?slot&:(< ?slot 0)));vuoto o non ha quel tipo
          (not (K-agent (content $?head dessert $?tail)))
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule cleantable-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action CleanTable)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent (free ?slot&:(> ?slot 1)))
  =>
  (assert (exec
            (step ?s)
            (action CleanTable)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 30))
              (waste yes))
  (pop-focus)
)

(defrule cleantable-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action CleanTable)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (or (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?) (perc2 ?perc2&:(neq ?perc2 Table))
        (perc3 ?) (perc4 ?perc4&:(neq ?perc4 Table))
        (perc5 ?) (perc6 ?perc6&:(neq ?perc6 Table))
        (perc7 ?) (perc8 ?perc8&:(neq ?perc8 Table))
        (perc9 ?)
      )
      (K-agent (free ?slot&:(< ?slot 2)))
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule releasetrash-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action ReleaseTrash)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 TrashBasket))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 TrashBasket))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 TrashBasket))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 TrashBasket))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent (waste yes))
  =>
  (assert (exec
            (step ?s)
            (action ReleaseTrash)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 10))
              (waste no))
  (pop-focus)
)

(defrule releasetrash-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action ReleaseTrash)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (or (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 TrashBasket))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 TrashBasket))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 TrashBasket))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 TrashBasket))
          (perc9 ?)
      )
      (K-agent (waste no))
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule checkid-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action CheckId)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (perc-vision
    (step ?s)
    (time ?)
    (pos-r ?)
    (pos-c ?)
    (direction ?)
    (perc1 ?)
    (perc2 ?perc&:(or (eq ?perc PersonSeated) (eq ?perc PersonStanding)))
    (perc3 ?)
    (perc4 ?) (perc5 ?) (perc6 ?)
    (perc7 ?) (perc8 ?) (perc9 ?)
  )
  ?f2<-(K-agent)
  =>
  (assert (exec
            (step ?s)
            (action CheckId)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 20)))
  (retract ?f)
  (pop-focus)
)

(defrule checkid-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action CheckId)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
        (step ?s)
        (time ?)
        (pos-r ?)
        (pos-c ?)
        (direction ?)
        (perc1 ?)
        (perc2 ?perc&:(or (eq ?perc PersonSeated) (eq ?perc PersonStanding)))
        (perc3 ?)
        (perc4 ?) (perc5 ?) (perc6 ?)
        (perc7 ?) (perc8 ?) (perc9 ?)
      )
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)

(defrule emptyrobot-allowed
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action EmptyRobot)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (not (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 TrashBasket))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 TrashBasket))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 TrashBasket))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 TrashBasket))
          (perc9 ?)
       )
  )
  ?f2<-(K-agent)
  =>
  (assert (exec
            (step ?s)
            (action ReleaseTrash)
            (param1 ?x)
            (param2 ?y)
            (param3 ?unused1)
            (param4 ?unused2)
          )
  )
  (retract ?f)
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 20))
              (waste no) (content ));non so se funziona
  (pop-focus)
)

(defrule emptyrobot-denied
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action EmptyRobot)
    (param1 ?x)
    (param2 ?y)
    (param3 ?unused1)
    (param4 ?unused2)
  )
  (or (perc-vision
          (step ?s)
          (time ?)
          (pos-r ?)
          (pos-c ?)
          (direction ?)
          (perc1 ?) (perc2 ?perc2&:(neq ?perc2 TrashBasket))
          (perc3 ?) (perc4 ?perc4&:(neq ?perc4 TrashBasket))
          (perc5 ?) (perc6 ?perc6&:(neq ?perc6 TrashBasket))
          (perc7 ?) (perc8 ?perc8&:(neq ?perc8 TrashBasket))
          (perc9 ?)
       )
       (not (prior-cell (pos-c ?x) (pos-r ?y) (contains TrashBasket)))
  )
  =>
  (assert (replanning))
  (retract ?f)
  (pop-focus)
)
;TESTED
(defrule wait
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Wait)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  ?f2<-(K-agent)
  =>
  (assert (exec
            (step ?s)
            (action Wait)
            (param1 ?unused1)
            (param2 ?unused2)
            (param3 ?unused3)
            (param4 ?unused4)
          )
  )
  (modify ?f2 (step (+ ?s 1)) (time (+ ?t 5)))
  (retract ?f)
  (pop-focus)
)

(defrule done
  (status (step ?s) (time ?t))
  ?f<-(to-exec
    (step ?s)
    (action Done)
    (param1 ?unused1)
    (param2 ?unused2)
    (param3 ?unused3)
    (param4 ?unused4)
  )
  ?f2<-(K-agent)
  =>
  (assert (exec
            (step ?s)
            (action Done)
            (param1 ?unused1)
            (param2 ?unused2)
            (param3 ?unused3)
            (param4 ?unused4)
          )
  )
  (modify ?f2 (step (+ ?s 1)))
  (retract ?f)
  (pop-focus)
)
